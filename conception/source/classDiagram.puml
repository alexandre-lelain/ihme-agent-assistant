@startuml

class Tokenizer << (S, orange) Singleton>>{
    +{static} create(): <b>Tokenizer</b>
    +tokenize(String text): List<<b>Token</b>>
}
class Token {
    +<b>TokenType</b> type
    +String value
}
enum TokenType
hide TokenType methods
class DialogManager {
    +parse(<b>Input</b> in): List<<b>Token</b>>
}
class Dialog {
    +addStep(String text): void
}
class DialogStep {
    .. constructor ..
    +DialogStep(String text): void
    .. other methods ..
    +fillForm(<b>Form</b> form): void
}
abstract class Form {
    +{abstract} generateAction(): <b>Action</b>
}
class AlarmForm {
    +generateAction(): <b>AlarmAction</b>
}
abstract class Action
class AlarmAction
class Input {
    +String text
}
class Output {
    +String text
}

DialogManager -left-> Input : reçoit
DialogManager -> Output : retourne
DialogManager *-- Dialog : maintient
Dialog *-- DialogStep : est\ncomposé\nde
Dialog *-- Form : remplit
DialogStep *-- Token : est\ncomposé\nde
DialogStep -left-> Tokenizer : utilise
Form -> Action : génère
Form <|-- AlarmForm
Action <|-- AlarmAction
AlarmForm .> AlarmAction
Tokenizer --> Token : détermine
Token o-- TokenType : est\nde type
Form -- Token


@enduml
